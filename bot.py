import os
import logging
import base64
import aiohttp
import json
from datetime import datetime
from pathlib import Path
from openai import OpenAI
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, CallbackContext, filters
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
CHANNEL_USERNAME = os.environ.get('CHANNEL_USERNAME')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
REQUESTS_FILE = Path("requests.json")
if REQUESTS_FILE.exists():
    with open(REQUESTS_FILE, "r") as f:
        user_last_request = json.load(f)
else:
    user_last_request = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {CHANNEL_USERNAME} –∏ –Ω–∞–∂–º–∏ /check ‚úÖ"
    )

# –ö–æ–º–∞–Ω–¥–∞ /check ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    bot = context.bot
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if member.status in ["member", "creator", "administrator"]:
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é ‚ú®\n"
                "–ú–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, —á—Ç–æ–±—ã —è —Ç–æ—á–Ω–µ–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å."
            )
        else:
            await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ /check")
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT-4 Turbo (Vision)
async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ, –∞ –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª.")
        return

    user_id = str(update.effective_user.id)
    today = datetime.utcnow().strftime("%Y-%m-%d")
    last_date = user_last_request.get(user_id)

    if last_date == today:
        await update.message.reply_text("üö´ –¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞!")
        return

    user_input = update.message.caption or "–≠—Ç–æ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –º—É–ª—å—Ç—è—à–Ω–æ–º —Å—Ç–∏–ª–µ."

    prompt = (
        "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é. "
        "–î–∞–π –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–¥–±–µ–∫: —á—Ç–æ —Ö–æ—Ä–æ—à–æ, –∞ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å. "
        "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é, —Ü–≤–µ—Ç, —Ñ–æ—Ä–º—É, –∞–Ω–∞—Ç–æ–º–∏—é –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å."
    )

    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    file_url = file.file_path

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
    async with aiohttp.ClientSession() as session:
        async with session.get(file_url) as resp:
            image_bytes = await resp.read()
            base64_image = base64.b64encode(image_bytes).decode("utf-8")

    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é... üß†")

    try:
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt + "\n\n" + user_input},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}"
                            }
                        }
                    ]
                }
            ],
            max_tokens=1000,
        )
        feedback = response.choices[0].message.content

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_last_request[user_id] = today
        with open(REQUESTS_FILE, "w") as f:
            json.dump(user_last_request, f)

        await update.message.reply_text(f"üé® –í–æ—Ç —Ñ–∏–¥–±–µ–∫ –Ω–∞ —Ç–≤–æ—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é:\n\n{feedback}")
    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT-4 Turbo:", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: CallbackContext) -> None:
    logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}", exc_info=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("check", check))
    app.add_handler(MessageHandler(filters.PHOTO, handle_image))
    app.add_error_handler(error_handler)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(close_loop=False)
