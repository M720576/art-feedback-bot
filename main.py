# main.py
# –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É, –∑–æ–≤—ë—Ç –ò–ò –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
# –í–µ—Ä—Å–∏—è: —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π /reset_all (–±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è) + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ID, —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã.

import os
import asyncio
import base64
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command

from openai import OpenAI
from db_pg import (
    reset_bot,
    init_db,
    get_count,
    inc_count,
    save_feedback_and_grant_bonus,
    already_sent_feedback_this_month,
    month_stats,
    reset_all_limits,
)
from prompts import SYSTEM_PROMPT, USER_PROMPT
from utils import downscale

# ---- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("art-feedback-bot")

EXTRA_INSTRUCTION = (
    "–í–∞–∂–Ω–æ: –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–∞–∂–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º –∂–µ –ø—É–Ω–∫—Ç–∞–º, "
    "–∫–∞–∫ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏. –í –Ω–∞—á–∞–ª–µ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ, –∏ –ø—Ä–æ–¥–æ–ª–∂–∏.\n"
)

# ---- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

def _to_int(env_name: str, default: int) -> int:
    raw = os.getenv(env_name)
    if raw is None:
        return default
    try:
        return int(str(raw).strip())
    except Exception:
        log.warning("ENV %s=%r –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ int. –ò—Å–ø–æ–ª—å–∑—É—é %d", env_name, raw, default)
        return default

FREE_LIMIT = _to_int("FREE_LIMIT", 3)
OWNER_ID   = _to_int("OWNER_ID", 0)

# –ö—É–¥–∞ —Å–ª–∞—Ç—å –æ—Ç–∑—ã–≤—ã: –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü. –ú–æ–∂–Ω–æ –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å.
_FEEDBACK_GID = os.getenv("FEEDBACK_GROUP_ID")
FEEDBACK_GROUP_ID = None
if _FEEDBACK_GID:
    try:
        FEEDBACK_GROUP_ID = int(_FEEDBACK_GID.strip())
    except Exception:
        log.warning("ENV FEEDBACK_GROUP_ID=%r –Ω–µ int. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–π–¥—ë—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É.", _FEEDBACK_GID)

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = Bot(TELEGRAM_BOT_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)
dp = Dispatcher()

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –ê—Ä—Ç-feedback –ë–û–¢.\n"
    "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –¥–∞–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ –¥–µ–ª—É —Ä–∞–∑–±–æ—Ä: –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, —Ä–∏—Ç–º—ã, —Ü–≤–µ—Ç/—Å–≤–µ—Ç, —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è, —ç–º–æ—Ü–∏–∏, —É–º–µ—Å—Ç–Ω–æ—Å—Ç—å –¥–ª—è –¶–ê.\n\n"
    f"–ù–∞ —Å—Ç–∞—Ä—Ç–µ —É —Ç–µ–±—è {FREE_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü.\n"
    "–°–æ–≤–µ—Ç: –∑–∞–≥—Ä—É–∂–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –±–µ–∑ —Å–∏–ª—å–Ω–æ–π –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏."
)

# ===== –•–µ–ª–ø–µ—Ä—ã =====

def bytes_to_data_url(jpeg_bytes: bytes) -> str:
    b64 = base64.b64encode(jpeg_bytes).decode("ascii")
    return f"data:image/jpeg;base64,{b64}"

async def analyze_image_with_gpt(image_bytes: bytes) -> str:
    data_url = bytes_to_data_url(image_bytes)

    def _call_openai():
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": EXTRA_INSTRUCTION + USER_PROMPT},
                        {"type": "image_url", "image_url": {"url": data_url}},
                    ],
                },
            ],
            max_tokens=600,
            temperature=0.4,
        )
        return completion.choices[0].message.content or ""

    reply = await asyncio.to_thread(_call_openai)
    return reply.strip()

async def _send_feedback_to_owner_or_group(text: str) -> None:
    """–ü—ã—Ç–∞–µ–º—Å—è —Å–ª–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞; –∏–Ω–∞—á–µ ‚Äî –≤–ª–∞–¥–µ–ª—å—Ü—É."""
    if FEEDBACK_GROUP_ID:
        try:
            await bot.send_message(FEEDBACK_GROUP_ID, text)
            return
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ FEEDBACK_GROUP_ID=%s: %s. –ü–æ—à–ª—é –≤–ª–∞–¥–µ–ª—å—Ü—É.", FEEDBACK_GROUP_ID, e)
    await bot.send_message(OWNER_ID, text)

# ===== –ö–æ–º–∞–Ω–¥—ã =====

@dp.message(CommandStart())
async def start(m: Message):
    await m.answer(WELCOME_TEXT)

@dp.message(Command("stats"))
async def stats(m: Message):
    if m.from_user.id != OWNER_ID:
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return
    users_total, users_hit_limit, total_requests, feedback_count = await month_stats(FREE_LIMIT)
    await m.answer(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n"
        f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_total}\n"
        f"‚Ä¢ –î–æ—à–ª–∏ –¥–æ –ª–∏–º–∏—Ç–∞ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {FREE_LIMIT}): {users_hit_limit}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤: {feedback_count}"
    )

@dp.message(Command("reset_limits"))
async def reset_limits_cmd(m: Message):
    if m.from_user.id != OWNER_ID:
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return
    await reset_all_limits()
    await m.answer("‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —Å–±—Ä–æ—à–µ–Ω—ã.")

# /reset_all ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω–æ, –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏)
@dp.message(Command("reset_all"))
async def reset_all_cmd(m: Message):
    log.info("DEBUG /reset_all: from_user.id=%s, OWNER_ID=%s", m.from_user.id, OWNER_ID)
    if m.from_user.id != OWNER_ID:
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return
    try:
        await reset_bot()
        await m.answer("‚úÖ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: –ª–∏–º–∏—Ç—ã, –∏—Å—Ç–æ—Ä–∏—è –∏ –æ—Ç–∑—ã–≤—ã –æ—á–∏—â–µ–Ω—ã.")
        log.info("DEBUG reset_bot(): —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: {e}")
        log.exception("ERROR reset_bot(): %s", e)

@dp.message(Command("feedback"))
async def feedback(m: Message):
    user_id = m.from_user.id
    text = m.text or ""
    parts = text.split(" ", 1)
    payload = parts[1].strip() if len(parts) > 1 else ""

    if user_id == OWNER_ID:
        await m.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–±–µ –æ—Ç–∑—ã–≤ :)")
        return

    used = await get_count(user_id)
    if used < FREE_LIMIT:
        await m.answer("–£ —Ç–µ–±—è –µ—â—ë –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ‚Äî –¥–æ–∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö, –∞ –ø–æ—Ç–æ–º –ø—Ä–∏—Ö–æ–¥–∏ –∑–∞ +3 üôÇ")
        return

    if await already_sent_feedback_this_month(user_id):
        await m.answer("–¢—ã —É–∂–µ –ø—Ä–∏—Å—ã–ª–∞–ª –æ—Ç–∑—ã–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –∏ –ø–æ–ª—É—á–∏–ª +3. –°–ø–∞—Å–∏–±–æ!")
        return

    if not payload:
        await m.answer("–ù–∞–ø–∏—à–∏ —Ç–∞–∫:\n/feedback –ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å/–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ —á—Ç–æ —É–ª—É—á—à–∏—Ç—å.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤–æ –≤–Ω–µ—à–Ω–∏–π —á–∞—Ç/–≤–ª–∞–¥–µ–ª—å—Ü—É
    header = f"üìù –û—Ç–∑—ã–≤ –æ—Ç @{m.from_user.username or user_id} (id {user_id}):\n\n{payload}"
    await _send_feedback_to_owner_or_group(header)

    await save_feedback_and_grant_bonus(user_id, payload, FREE_LIMIT)
    await m.answer("–ü—Ä–∏–Ω—è–ª! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ ‚Äî –Ω–∞–∫–∏–Ω—É–ª —Ç–µ–±–µ –µ—â—ë 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ. –ñ–¥—É –Ω–æ–≤—É—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é.")

# ===== –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã =====
@dp.message(F.text & ~F.text.startswith("/"))
async def handle_text_feedback(m: Message):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ /feedback,
    –µ—Å–ª–∏ —É –Ω–µ–≥–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏ –æ–Ω –µ—â—ë –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª –æ—Ç–∑—ã–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.
    """
    user_id = m.from_user.id
    text = (m.text or "").strip()
    if not text:
        return

    used = await get_count(user_id)
    if used < FREE_LIMIT:
        return

    if await already_sent_feedback_this_month(user_id):
        return

    header = f"üìù –û—Ç–∑—ã–≤ –æ—Ç @{m.from_user.username or user_id} (id {user_id}):\n\n{text}"
    await _send_feedback_to_owner_or_group(header)

    await save_feedback_and_grant_bonus(user_id, text, FREE_LIMIT)
    await m.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –Ø –Ω–∞–∫–∏–Ω—É–ª —Ç–µ–±–µ –µ—â—ë 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∏. –ñ–¥—É –Ω–æ–≤—É—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é.")

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π =====
@dp.message(F.photo | F.document)
async def handle_image(m: Message):
    user_id = m.from_user.id

    # –õ–∏–º–∏—Ç—ã –∏ –±–æ–Ω—É—Å—ã
    used = await get_count(user_id)
    if used >= FREE_LIMIT:
        if await already_sent_feedback_this_month(user_id):
            await m.answer(
                "–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü. –¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ñ–∏–¥–±–µ–∫ –∏ –ø–æ–ª—É—á–∏–ª +3. "
                "–î–∞–ª—å—à–µ ‚Äî –ø–ª–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã. –ù–∞–ø–∏—à–∏ –∞–≤—Ç–æ—Ä—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å Pro/Unlimited."
            )
        else:
            await m.answer(
                "–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –•–æ—á–µ—à—å –µ—â—ë +3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ? "
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤: —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å/–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –±–æ—Ç–µ –∏ —á—Ç–æ —É–ª—É—á—à–∏—Ç—å ‚Äî –∏ —è –Ω–∞–∫–∏–Ω—É —Ç–µ–±–µ –µ—â—ë +3 –ø–æ–ø—ã—Ç–∫–∏."
            )
        return

    # –í—ã–¥–µ–ª—è–µ–º file_id
    file_id = None
    if m.photo:
        file_id = m.photo[-1].file_id
    elif m.document and m.document.mime_type and str(m.document.mime_type).startswith("image/"):
        file_id = m.document.file_id
    else:
        await m.answer("–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É (image/*).")
        return

    try:
        tg_file = await bot.get_file(file_id)
        file_stream = await bot.download_file(tg_file.file_path)
        raw = file_stream.read()

        prepared = downscale(raw, max_side=1536)
        await m.answer("–ü—Ä–∏–Ω—è–ª! –°–µ–∫—É–Ω–¥—É, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É‚Ä¶ ü§î")

        reply = await analyze_image_with_gpt(prepared)
        new_count = await inc_count(user_id)
        left = max(FREE_LIMIT - new_count, 0)
        await m.answer(f"{reply}\n\n–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {left}")

    except Exception as e:
        await m.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.")
        log.exception("ERROR handle_image: %s", e)

# ===== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ =====

async def main():
    await init_db()
    log.info("Artdir feedback bot is up and running. OWNER_ID=%s FEEDBACK_GROUP_ID=%s FREE_LIMIT=%s",
             OWNER_ID, FEEDBACK_GROUP_ID, FREE_LIMIT)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
