# main.py
# –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É, –∑–æ–≤—ë—Ç –ò–ò –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ /reset_all —Å –¥–≤–æ–π–Ω—ã–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º,
# –æ—Ç–¥–µ–ª—å–Ω–∞—è /reset_limits, –±–æ–Ω—É—Å—ã –∑–∞ –æ—Ç–∑—ã–≤; –æ—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º.

import os
import asyncio
import base64
import secrets
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command

from openai import OpenAI
from db_pg import (
    reset_bot,
    init_db,
    get_count,
    inc_count,
    save_feedback_and_grant_bonus,
    already_sent_feedback_this_month,
    month_stats,
    reset_all_limits,
)
from prompts import SYSTEM_PROMPT, USER_PROMPT
from utils import downscale

# –õ–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
FREE_LIMIT = int(os.getenv("FREE_LIMIT", "3"))
OWNER_ID = int(os.getenv("OWNER_ID", "0"))
FEEDBACK_GROUP_ID = int(os.getenv("FEEDBACK_GROUP_ID", "0"))

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY.")

bot = Bot(TELEGRAM_BOT_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)
dp = Dispatcher()

EXTRA_INSTRUCTION = (
    "–í–∞–∂–Ω–æ: –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–∞–∂–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º –∂–µ –ø—É–Ω–∫—Ç–∞–º, "
    "–∫–∞–∫ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏. –í –Ω–∞—á–∞–ª–µ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ, –∏ –ø—Ä–æ–¥–æ–ª–∂–∏.\n"
)

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –ê—Ä—Ç-feedback –ë–û–¢.\n"
    "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –¥–∞–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ –¥–µ–ª—É —Ä–∞–∑–±–æ—Ä: –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, —Ä–∏—Ç–º—ã, —Ü–≤–µ—Ç/—Å–≤–µ—Ç, —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è, —ç–º–æ—Ü–∏–∏, —É–º–µ—Å—Ç–Ω–æ—Å—Ç—å –¥–ª—è –¶–ê.\n\n"
    f"–ù–∞ —Å—Ç–∞—Ä—Ç–µ —É —Ç–µ–±—è {FREE_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü.\n"
    "–°–æ–≤–µ—Ç: –∑–∞–≥—Ä—É–∂–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –±–µ–∑ —Å–∏–ª—å–Ω–æ–π –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏."
)

# ===== –•–µ–ª–ø–µ—Ä—ã =====

def bytes_to_data_url(jpeg_bytes: bytes) -> str:
    b64 = base64.b64encode(jpeg_bytes).decode("ascii")
    return f"data:image/jpeg;base64,{b64}"

async def analyze_image_with_gpt(image_bytes: bytes) -> str:
    data_url = bytes_to_data_url(image_bytes)
    def _call_openai():
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": EXTRA_INSTRUCTION + USER_PROMPT},
                        {"type": "image_url", "image_url": {"url": data_url}},
                    ],
                },
            ],
            max_tokens=600,
            temperature=0.4,
        )
        return completion.choices[0].message.content or ""

    reply = await asyncio.to_thread(_call_openai)
    return reply.strip()

# ===== –ö–æ–º–∞–Ω–¥—ã =====

@dp.message(CommandStart())
async def start(m: Message):
    await m.answer(WELCOME_TEXT)

@dp.message(Command("stats"))
async def stats(m: Message):
    if m.from_user.id != OWNER_ID:
        return await m.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
    users_total, users_hit_limit, total_requests, feedback_count = await month_stats(FREE_LIMIT)
    await m.answer(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n"
        f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_total}\n"
        f"‚Ä¢ –î–æ—à–ª–∏ –¥–æ –ª–∏–º–∏—Ç–∞ ({FREE_LIMIT}): {users_hit_limit}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤: {feedback_count}"
    )

@dp.message(Command("reset_limits"))
async def reset_limits_cmd(m: Message):
    if m.from_user.id != OWNER_ID:
        return await m.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
    await reset_all_limits()
    await m.answer("‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —Å–±—Ä–æ—à–µ–Ω—ã.")

# /reset_all —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
_pending_reset_code: str | None = None

@dp.message(Command("reset_all"))
async def reset_all_cmd(m: Message):
    global _pending_reset_code
    if m.from_user.id != OWNER_ID:
        return await m.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")

    parts = (m.text or "").strip().split()

    if len(parts) == 1:
        _pending_reset_code = secrets.token_hex(4)
        await m.answer(
            "‚ö†Ô∏è –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö (–ª–∏–º–∏—Ç—ã, –∏—Å—Ç–æ—Ä–∏—è, –æ—Ç–∑—ã–≤—ã). –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n"
            f"–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å:\n/reset_all CONFIRM {_pending_reset_code}"
        )
        return

    if len(parts) == 3 and parts[1].upper() == "CONFIRM":
        if not _pending_reset_code or parts[2] != _pending_reset_code:
            return await m.answer("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–ª –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.")
        _pending_reset_code = None
        try:
            await reset_bot()
            await m.answer("‚úÖ –ì–æ—Ç–æ–≤–æ. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã.")
        except Exception as e:
            await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /reset_all –∏–ª–∏ /reset_all CONFIRM <code>.")

@dp.message(Command("feedback"))
async def feedback(m: Message):
    user_id = m.from_user.id
    text = m.text or ""
    parts = text.split(" ", 1)
    payload = parts[1].strip() if len(parts) > 1 else ""

    if user_id == OWNER_ID:
        return await m.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    used = await get_count(user_id)
    if used < FREE_LIMIT:
        return await m.answer("–£ —Ç–µ–±—è –µ—â—ë –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö —Å–Ω–∞—á–∞–ª–∞ üôÇ")

    if await already_sent_feedback_this_month(user_id):
        return await m.answer("–¢—ã —É–∂–µ –ø—Ä–∏—Å—ã–ª–∞–ª –æ—Ç–∑—ã–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –∏ –ø–æ–ª—É—á–∏–ª +3. –°–ø–∞—Å–∏–±–æ!")

    if not payload:
        return await m.answer("–ù–∞–ø–∏—à–∏ —Ç–∞–∫:\n/feedback –¢–≤–æ–π –æ—Ç–∑—ã–≤.")

    try:
        await bot.send_message(
            FEEDBACK_GROUP_ID,
            f"üìù –û—Ç–∑—ã–≤ –æ—Ç @{m.from_user.username or user_id} (id {user_id}):\n\n{payload}",
        )
    except Exception:
        await bot.send_message(OWNER_ID, f"üìù –û—Ç–∑—ã–≤ –æ—Ç id {user_id}:\n\n{payload}")

    await save_feedback_and_grant_bonus(user_id, payload, FREE_LIMIT)
    await m.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ù–∞–∫–∏–Ω—É–ª –µ—â—ë 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∏.")

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
@dp.message(F.text & ~F.text.startswith("/"))
async def handle_text_feedback(m: Message):
    user_id = m.from_user.id
    text = (m.text or "").strip()
    if not text:
        return

    used = await get_count(user_id)
    if used < FREE_LIMIT or await already_sent_feedback_this_month(user_id):
        return

    try:
        await bot.send_message(
            FEEDBACK_GROUP_ID,
            f"üìù –û—Ç–∑—ã–≤ –æ—Ç @{m.from_user.username or user_id} (id {user_id}):\n\n{text}",
        )
    except Exception:
        await bot.send_message(OWNER_ID, f"üìù –û—Ç–∑—ã–≤ –æ—Ç id {user_id}:\n\n{text}")

    await save_feedback_and_grant_bonus(user_id, text, FREE_LIMIT)
    await m.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ù–∞–∫–∏–Ω—É–ª –µ—â—ë 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@dp.message(F.photo | F.document)
async def handle_image(m: Message):
    user_id = m.from_user.id
    used = await get_count(user_id)
    if used >= FREE_LIMIT:
        if await already_sent_feedback_this_month(user_id):
            await m.answer("–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª +3 –∑–∞ –æ—Ç–∑—ã–≤.")
        else:
            await m.answer(
                "–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –•–æ—á–µ—à—å +3? –ü—Ä–∏—à–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ ‚Äî —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å/–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å."
            )
        return

    file_id = m.photo[-1].file_id if m.photo else (
        m.document.file_id if m.document and str(m.document.mime_type).startswith("image/") else None
    )
    if not file_id:
        return await m.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É (image/*).")

    try:
        tg_file = await bot.get_file(file_id)
        file_stream = await bot.download_file(tg_file.file_path)
        raw = file_stream.read()
        prepared = downscale(raw, max_side=1536)

        await m.answer("–ü—Ä–∏–Ω—è–ª! –°–µ–∫—É–Ω–¥—É, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶ ü§î")
        reply = await analyze_image_with_gpt(prepared)
        new_count = await inc_count(user_id)
        left = max(FREE_LIMIT - new_count, 0)
        await m.answer(f"{reply}\n\n–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {left}")
    except Exception as e:
        await m.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        log.error("Image handling error: %s", e)

# ===== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ =====

async def main():
    await init_db()
    log.info(
        "Bot is up. OWNER_ID=%s FEEDBACK_GROUP_ID=%s FREE_LIMIT=%s",
        OWNER_ID, FEEDBACK_GROUP_ID, FREE_LIMIT
    )
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
