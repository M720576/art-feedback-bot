# main.py
# –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª: —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É, –∑–æ–≤—ë—Ç –ò–ò –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

import os
import asyncio
import base64

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command

from openai import OpenAI

# –ò–º–ø–æ—Ä—Ç PostgreSQL —Ñ—É–Ω–∫—Ü–∏–π
from db_pg import (
    init_db,
    get_count,
    inc_count,
    save_feedback_and_grant_bonus,
    already_sent_feedback_this_month,
    month_stats
)

from prompts import SYSTEM_PROMPT, USER_PROMPT
from utils import downscale

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
FREE_LIMIT = int(os.getenv("FREE_LIMIT", "3"))

# chat_id –≥—Ä—É–ø–ø—ã –¥–ª—è —Ñ–∏–¥–±–µ–∫–∞
FEEDBACK_GROUP_ID = -1002092711646

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = Bot(TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
client = OpenAI(api_key=OPENAI_API_KEY)

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –ê—Ä—Ç-feedback –ë–û–¢.\n"
    f"–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –¥–∞–º —Ä–∞–∑–±–æ—Ä. –ù–∞ —Å—Ç–∞—Ä—Ç–µ —É —Ç–µ–±—è {FREE_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
)

@dp.message(CommandStart())
async def start(m: Message):
    await m.answer(WELCOME_TEXT)

def bytes_to_data_url(jpeg_bytes: bytes) -> str:
    """–ö–æ–¥–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã JPEG –≤ data:URL –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ GPT-4o."""
    b64 = base64.b64encode(jpeg_bytes).decode("ascii")
    return f"data:image/jpeg;base64,{b64}"

async def analyze_image_with_gpt(image_bytes: bytes) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É + –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ GPT-4o –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞."""
    data_url = bytes_to_data_url(image_bytes)

    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": USER_PROMPT},
                    {"type": "image_url", "image_url": {"url": data_url}},
                ],
            },
        ],
        max_tokens=700,
        temperature=0.5,
    )
    reply = completion.choices[0].message.content or ""
    return reply.strip()

@dp.message(F.photo | F.document)
async def handle_image(m: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    user_id = m.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    used = await get_count(user_id)
    if used >= FREE_LIMIT:
        await m.answer(
            "–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –ù–∞–ø–∏—à–∏ —Å—é–¥–∞, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, "
            "–∏ –ø–æ–ª—É—á–∏ –µ—â—ë 3 –∑–∞–ø—Ä–æ—Å–∞."
        )
        return

    # –ë–µ—Ä—ë–º —Ñ–∞–π–ª
    file_id = None
    if m.photo:
        file_id = m.photo[-1].file_id
    elif m.document and m.document.mime_type and m.document.mime_type.startswith("image/"):
        file_id = m.document.file_id
    else:
        await m.answer("–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É (image/*).")
        return

    try:
        tg_file = await bot.get_file(file_id)
        file_stream = await bot.download_file(tg_file.file_path)
        raw = file_stream.read()

        # –£–º–µ–Ω—å—à–∞–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        prepared = downscale(raw, max_side=1536)

        await m.answer("–ü—Ä–∏–Ω—è–ª! –°–µ–∫—É–Ω–¥—É, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶")

        reply = await analyze_image_with_gpt(prepared)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        new_count = await inc_count(user_id)
        left = max(FREE_LIMIT - new_count, 0)

        await m.answer(f"{reply}\n\n–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {left}")

    except Exception as e:
        await m.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.")
        print("ERROR:", e)

# –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º —Ñ–∏–¥–±–µ–∫–æ–º
@dp.message(F.text)
async def handle_feedback(m: Message):
    user_id = m.from_user.id
    used = await get_count(user_id)

    if used >= FREE_LIMIT:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–∏–¥–±–µ–∫ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
        if await already_sent_feedback_this_month(user_id):
            await m.answer("–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ñ–∏–¥–±–µ–∫ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ. –ñ–¥—É –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
            return

        feedback_text = f"–§–∏–¥–±–µ–∫ –æ—Ç @{m.from_user.username or m.from_user.full_name} (id {user_id}):\n{m.text}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±–µ–∫ –≤ –≥—Ä—É–ø–ø—É
        try:
            await bot.send_message(FEEDBACK_GROUP_ID, feedback_text)
        except Exception as e:
            print("ERROR sending feedback to group:", e)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–¥–±–µ–∫ –≤ –±–∞–∑–µ –∏ –≤—ã–¥–∞—ë–º –±–æ–Ω—É—Å
        try:
            await save_feedback_and_grant_bonus(user_id, m.text)
            await m.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∏–¥–±–µ–∫! –¢–µ–±–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –µ—â—ë 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.")
        except Exception as e:
            await m.answer("–ü—Ä–∏–Ω—è–ª —Ñ–∏–¥–±–µ–∫, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            print("ERROR saving feedback:", e)
    else:
        await m.answer("–ü—Ä–∏—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start.")

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É)
OWNER_ID = int(os.getenv("OWNER_ID", "151541823"))

@dp.message(Command("stats"))
async def stats(m: Message):
    if m.from_user.id != OWNER_ID:
        return
    stats_data = await month_stats()
    total_users = len(stats_data)
    full_limit_users = sum(1 for _, count in stats_data if count >= FREE_LIMIT)
    await m.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ {FREE_LIMIT} –ø–æ–ø—ã—Ç–æ–∫: {full_limit_users}"
    )

async def main():
    await init_db()
    print("Artdir feedback bot is up and running.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
